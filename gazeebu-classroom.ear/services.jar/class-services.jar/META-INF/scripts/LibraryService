import com.rameses.annotations.*;
import java.io.*;
import java.net.*;
import com.rameses.io.*;

/***
* This class handles management of classes.
*/
public class LibraryService {

	@Env
	def env;
	
	@PersistenceContext("main")
	def em;

	@Service("DateService")
	def dateSvc;
	
	def df = new java.text.SimpleDateFormat("MM-dd-yyyy");

	private long DEFAULT_ALLOWED_SIZE = 10000000;	//10 MB initial allowed
	
	
	private def buildUrl( res ) {
		return buildTargetDir( res ) + "/" + buildTargetFile( res );
	}
	
	private def buildTargetDir( res ) {
		return "USR" + res.userid.hashCode() + "/$res.category";
	}
	
	private def buildTargetFile( res ) {
		return "FILE" + res.objid.hashCode() + (res.ext? "."+res.ext : "");
	}
	
	@ProxyMethod
	public def uploadResource( o ) {
		o.objid = "RES:" + new java.rmi.server.UID(); 
		o.userid = env.userid;
		o.dtfiled = dateSvc.serverDate;
		try {
			o.ext = o.filename.substring(o.filename.lastIndexOf(".")+1);
		}
		catch(e){;}
		
		//before uploading check if the user has not yet used maximum size;
		def acct = em.read( "resource:account", o ); 
		if(!acct) {
			acct = [:];
			acct.allowedsize = DEFAULT_ALLOWED_SIZE;
			acct.consumed = 0;
			acct.userid = o.userid;
		}
		if( acct.allowedsize < acct.consumed + o.filesize ) 
			throw new Exception("Your allowed storage size has been exceeded. ");
		
		String tmpUrl= System.getProperty("gazeebu.temp.url") + "/" + o.tmpfileid;
		String resUrl= System.getProperty("gazeebu.library.url") + "/" + buildTargetDir( o );
		File dest = new File(new URL(resUrl).toURI());
		File f = new File(dest, buildTargetFile(o) );
		if( !f.getParentFile().exists() ) f.getParentFile().mkdirs();
		
		File src = new File( new URL(tmpUrl).toURI() );
		
		def fis = new FileTransfer.FileInputSource(src);
		def foh = new FileTransfer.FileOutputHandler(f);
		FileTransfer ft = new FileTransfer();
		ft.transfer( fis, foh );
		
		src.delete();
		em.create( "resource", o );
		
		acct.consumed += o.filesize;
		em.save( "resource:account", acct );
	}
	
	@ProxyMethod
	public def getResources( o ) {
		o.userid = env.userid;
		def qryName = "resource:list-all";
		def list = em.sqlContext.createNamedQuery(qryName).setParameters(o).resultList;
		list.each {
			if(it.dtfiled) it.dtfiled = df.format(it.dtfiled);
			it.fileurl = buildUrl( it );
		}
		return list;
	}
	
	@ProxyMethod
	public def removeResources( list ) {
		def revert = 0;
		def files = [];
		list.each {
			def x = em.read( "resource", [objid: it] );
			revert += x.filesize;
			def fileurl = buildUrl(x);
			files.add( fileurl );
			em.delete( "resource", x );
		}
		def z = em.read( "resource:account", [userid: env.userid] );
		z.consumed -= revert;
		em.save( "resource:account", z );
		
		String tmpUrl= System.getProperty("gazeebu.library.url");
		files.each {
			new File( new URL(tmpUrl+"/"+it).toURI() ).delete();
		}
	}
	
	@ProxyMethod
	public def findResources( param ) {
		if( param.title ) param.title = '%' + param.title + '%';
		return em.sqlContext.createNamedQuery("resource:find").setParameters(param).resultList.each{
			it.fileurl = buildUrl( it );
			it.dtfiled = df.format( it.dtfiled );
		};
	}
	
}
