import com.rameses.annotations.*;

import java.util.concurrent.*;

/***
* This service all classroom related functions like adding students, retrieving class info. notifying students, etc.
*/
class ClassroomService {

	@PersistenceContext("main")
	def em;
	
	@Resource("CacheService")
	def cacheService;
	
	@Service("UserProfileService")
	def userService;
	
	@Env
	def env;
	
	@ProxyMethod
	public def getClassInfo( def classid ) {
		def c = cacheService.get(classid);
		if(!c) {
			c = em.read("class", [objid:classid] );
			if(c) {
				def threads = [];	
				ExecutorService exec = Executors.newCachedThreadPool();
				c.members = em.sqlContext.createNamedQuery( "classroom:members").setParameters([classid:classid]).resultList;
				c.members.each {
					it.messages = 0;	
					threads.add(  exec.submit(new ClassMemberSession(member:it, em:em)) );	
				}	
				
				//fork-join it
				threads.each { it.get(); }	
				cacheService.put(classid, c, 30000 );
				
				//set the teacher
				c.teacher = c.members.find{ it.usertype == 'teacher' };
			}
		}
		
		//load the user profile for each
		c.members.each {
			it.putAll(  userService.getInfo( [objid: it.objid] ) );
		}
		
		c.members.sort{ a,b ->
			if( a.usertype == 'teacher' ) return -1;
			if( b.usertype == 'teacher' ) return 1;
			return (a.lastname+'').compareTo(b.lastname);
		};

		//determine the role of the requester
		if(env.userid) {
			c.usertype = c.members.find{ it.objid == env.userid }?.usertype;
		}	
		return c;
	}

	@ProxyMethod
	public void updateOnlineStatus( def classid, def userid, def status ) {
		def clz = getClassInfo(classid);
		if(clz!=null) {
			cacheService.update( classid, 
				[ '''
					{o,v->
						o.members.find{x->x.objid==v.userid}?.status=v.status;
					};
					''', 
				[userid:userid, status: status]  ]
			);
		}	
	}
	
	@ProxyMethod
	public void updateMessageStatus( def classid, def userid ) {
		def clz = getClassInfo(classid);
		if(clz!=null) {
			cacheService.update( classid, 
				[ '''
					{o,v->
						def z = o.members.find{x->x.objid==v.userid};
						z.messages=z.messages + 1;
					};
				  ''', 
				  [userid:userid]  
				]
			);
		}	
	}
	
	@ProxyMethod
	public void activateMembership( def classid, def userid ) {
		def user = em.sqlContext.createNamedQuery('classroom:find-member').setParameters([classid: classid, userid: userid]).singleResult;
		user.state = 'ACTIVE';
		em.update('class_membership', user);
		
		def clz = getClassInfo(classid);
		if(clz!=null) {
			cacheService.update( classid, 
				[ '''
					{o,v->
						o.members.find{x->x.objid==v.userid}?.state=v.state;
					};
					''', 
				[userid:userid, state: user.state]  ]
			);
		}
	}
	
	@ProxyMethod
	public void addStudent(def classid, def student) {
		def cs = [:];
		cs.objid = "CLSMMBRS" + new java.rmi.server.UID();
		cs.usertype = "student";
		cs.userid = student.objid;
		cs.classid = classid;	
		em.create( "class_membership", cs );
		cacheService.remove( classid );
	}
	
	@ProxyMethod
	public void addMember(def o) {
		o.objid = "CLSMMBRS" + new java.rmi.server.UID();
		em.create( "class_membership", o );
		cacheService.remove( o.classid );
	}
	
	@ProxyMethod
	public def getMemberInfo(o) {
		def classroom = getClassInfo( o.classid );
		return classroom.members.find{ it.objid == o.userid };
	}
	
	@ProxyMethod
	public def getCurrentUserInfo(classid) {
		def classroom = getClassInfo( classid );
		return classroom.members.find{ it.objid == env.userid };
	}
	
	
}

class ClassMemberSession implements Runnable {
	def em;
	def member;
	public void run() {
		member.status = "offline";
		def online_count = em.sqlContext.createQuery('select count(*) as count from sys_session where username=?')
					.setParameter(1, member.objid ).singleResult.count; 
		if( online_count > 0 ) member.status = "online";	
	}
}
