import com.rameses.annotations.*;
import com.rameses.util.*;
import java.util.concurrent.*;

/***
* This service all classroom related functions like adding students, retrieving class info. notifying students, etc.
*/
class ClassroomService 
{
	static final def TIMEOUT = 60 * 60 * 1000; //cache for 1 hour
	static final def OL_MEMBERS_SUFIX = ".members.online";
	static final def MEMBERS_SUFIX = ".members";

	@PersistenceContext("main")
	def em;
	
	@Resource("CacheService")
	def cacheService;
	
	@Service("UserProfileService")
	def userService;
	
	@Env
	def env;
	
	
	@ProxyMethod
	public def getClassInfo( def classid ) {
		def classinfo = cacheService.get(classid);
		if(!classinfo) {
			classinfo = em.read("class", [objid:classid] );
			if( !classinfo ) return null;
			
			cacheService.put(classid, classinfo, TIMEOUT );
		}
		
		//load members
		classinfo.members = cacheService.get(classid + MEMBERS_SUFIX);
		if( !classinfo.members ) {
			classinfo.members = em.sqlContext.createNamedQuery( "classroom:members").setParameters([classid:classid]).resultList;
			cacheService.put(classid + MEMBERS_SUFIX, classinfo.members, TIMEOUT);
		}
		
		//set the teacher
		classinfo.teacher = classinfo.members.find{ it.usertype == 'teacher' };
		
		//load online members
		def olmembers = cacheService.get(classid + OL_MEMBERS_SUFIX);
		if( !olmembers ) {
			def threads = [];	
			ExecutorService exec = Executors.newCachedThreadPool();
			classinfo.members.each {
				it.messages = 0;	
				threads.add(  exec.submit(new ClassMemberSession(member:it, em:em)) );	
			}
			
			//fork-join it
			threads.each { it.get(); }
			olmembers = [:]
			classinfo.members.each {
				if( it.status == 'online' ) olmembers[it.objid] = 'online';
			}
			cacheService.put( classid + OL_MEMBERS_SUFIX, olmembers, TIMEOUT );
		}
		
		//load the users profile for each
		classinfo.members.each {
			it.putAll(  userService.getInfo( [objid: it.objid] ) );
			it.status = (olmembers[it.objid]) ? 'online' : 'offline';
		}
		
		classinfo.members.sort{ a,b ->
			if( a.usertype == 'teacher' ) return -1;
			if( b.usertype == 'teacher' ) return 1;
			
			def alname = (a.lastname+'').toLowerCase();
			def blname = (b.lastname+'').toLowerCase();
			return alname.compareTo(blname);
		};

		//determine the role of the requester
		if(env.userid) {
			classinfo.usertype = classinfo.members.find{ it.objid == env.userid }?.usertype;
		}	
		return classinfo;
	}

	@ProxyMethod
	public void updateOnlineStatus( def classid, def userid, def status ) {
		cacheService.remove( classid + OL_MEMBERS_SUFIX );
	}
	
	@ProxyMethod
	public void updateMessageStatus( def classid, def userid ) {
		def clz = getClassInfo(classid);
		if(clz!=null) {
			def z = clz.members.find{x->x.objid==userid};
			z.messages=z.messages + 1;
		}	
	}
	
	@ProxyMethod
	public void activateMembership( def classid, def userid ) {
		def user = em.sqlContext.createNamedQuery('classroom:find-member').setParameters([classid: classid, userid: userid]).singleResult;
		user.state = 'ACTIVE';
		em.update('class_membership', user);
		cacheService.remove( classid + MEMBERS_SUFIX );
	}
	
	@ProxyMethod
	public void addMember(def o) {
		try {
			o.objid = "CLSMMBRS" + new java.rmi.server.UID();
			em.create( "class_membership", o );

			o.objid = o.userid;
			o.status = 'online';
			
			cacheService.remove( o.classid + MEMBERS_SUFIX );
			cacheService.remove( o.classid + OL_MEMBERS_SUFIX );
		}
		catch(e) {
			def oe = ExceptionManager.getOriginal(e);
			if( !oe.message?.toLowerCase()?.contains('duplicate entry') ) {
				throw e;
			}
		}
	}
	
	@ProxyMethod
	public def getMemberInfo(o) {
		def classroom = getClassInfo( o.classid );
		return classroom.members.find{ it.objid == o.userid };
	}
	
	@ProxyMethod
	public def getCurrentUserInfo(classid) {
		def classroom = getClassInfo( classid );
		return classroom.members.find{ it.objid == env.userid };
	}
	
	@ProxyMethod
	public void removeMember(def o) {
		def usr = em.sqlContext.createQuery('select uid from login where objid=?').setParameter(1, o.userid).singleResult;
		def online = em.sqlContext.createQuery('select 1 from sys_session where username=?').setParameter(1, usr.uid).singleResult;
		if( online ) throw new Exception('Cannot remove online member.');
		
		em.sqlContext.createNamedExecutor("classroom:remove-member").setParameters(o).execute();
		
		//remove also the class related items
		em.sqlContext.createNamedExecutor("classroom:remove-member-activities").setParameters(o).execute();
		
		//update cache
		cacheService.remove( o.classid + MEMBERS_SUFIX )
	}
	
}

class ClassMemberSession implements Runnable {
	def em;
	def member;
	public void run() {
		member.status = "offline";
		def online_count = em.sqlContext.createQuery('select count(*) as count from sys_session where userid=?')
					.setParameter(1, member.objid ).singleResult.count; 

		if( online_count > 0 ) member.status = "online";
	}
}
