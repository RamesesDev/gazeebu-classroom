import com.rameses.annotations.*;

class ExamService {
	
	@PersistenceContext("main")
	def em;

	@Service("ClassroomService")
    def classroomService;
	
	@ProxyMethod
	public def create(def o) {
		if(!o.objid) o.objid = "EXM"+ new java.rmi.server.UID();
		return em.create( "exam", o );
	}
	
	@ProxyMethod
	public def getSummary(def classid) {
		def p = [classid: classid];
		def classInfo = classroomService.getClassInfo(classid);
		def summary = [ 
			exams:em.sqlContext.createNamedQuery('exam:exams').setParameters(p).resultList, 
			students: classInfo.members.findAll{ it.membertype == "student" }
		];
		def dtformat = new java.text.SimpleDateFormat( "MM/dd" );
		summary.exams.each {
			if(it.examdate) it.examdate = dtformat.format(it.examdate);
			it.maxscore = new java.math.BigDecimal( it.maxscore );
			it.passingscore = new java.math.BigDecimal( it.passingscore );
		}

		def classResults = em.sqlContext.createNamedQuery("exam:results-byclass").setParameters(p).resultList;
		//retrieve results by class and target resukt to the student's results 
		summary.students.each { stud ->
			stud.entries = [:];
			summary.exams.each { exm->
				def entry = classResults.find{ x-> return (x.studentid == stud.objid && x.examid == exm.objid) };
				if(!entry) entry = [:];
				stud.entries[exm.objid] = entry; 
				
				//determine the state
				if( entry.score ) {
					try {
						entry.score = new java.math.BigDecimal(entry.score);
						entry.scorestate = ( entry.score < exm.passingscore ) ? "fail" : "pass";
					}
					catch(ign){;}	
				}	
			}
		}
		return summary;
	}
	
	@ProxyMethod
	public def getExamResult(def examid) {
		def e = em.read( "exam", [objid:examid] );
		def dtformat = new java.text.SimpleDateFormat( "MM/dd" );
		
		def classInfo = classroomService.getClassInfo(e.classid);
		def students = classInfo.members.findAll{ it.membertype == "student" };
		def examResults = em.sqlContext.createNamedQuery("exam:results-byexam").setParameters([examid:e.objid]).resultList;
		def results = [];
		students.each { stud->
			def v = examResults.find{z-> stud.objid == z.studentid }
			if(!v) {
				v = [objid: "EXMR:"+new java.rmi.server.UID(), examid:e.objid, studentid: stud.objid ];
			}
			v.lastname = stud.lastname;
			v.firstname = stud.firstname;
			v.profile = stud.profile;
			results.add( v );
		}
		
		return [title:e.title, 
				examdate:dtformat.format(e.examdate), 
				maxscore:e.maxscore, 
				passingscore: e.passingscore, 
				gradingtype:e.gradingtype, 
				results:results ];	
	}
	
	@ProxyMethod
	public def saveResults(def results) {
		results.each {
			em.save("exam:result", it );
		};
	}
	
}
