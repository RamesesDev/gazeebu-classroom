import com.rameses.annotations.*;
import java.io.*;
import com.rameses.io.FileTransfer;
import java.util.concurrent.*;
import java.util.*;

class DiscussionService {

	@PersistenceContext("main")
	def em;

	@Service("MessageService")
	def msgService;
	

	@Service("DateService")
	def dateService;
	
	@Env
	def env;
	
	def df = new java.text.SimpleDateFormat("EEE MMMM dd yyyy");
	
	@ProxyMethod
	public def getThreads(o) {
		o.limit = 10;
		def list =  em.sqlContext.createNamedQuery("discussion:thread-list").setParameters(o).resultList;
		list.each {
			if(it.dtposted) it.dtposted = df.format( it.dtposted );
		}
		return list;
	}
	
	@ProxyMethod
	public def openThread(o) {
		def x = em.read( "discussion:thread", o );
		x.resources = em.sqlContext.createNamedQuery("discussion:resource-list").setParameters(x).resultList;
		return x;
	}
	
	@ProxyMethod
	public def addThread(o) {
		o.objid = "DTHRD:"  + new java.rmi.server.UID();
		o.dtposted = dateService.serverDate;
		o.userid = env.userid;
		o.state = "open";
		em.create("discussion:thread", o );
	}

	@ProxyMethod
	public def updateThread(o) {
		em.update("discussion:thread", o );
	}
	
	@ProxyMethod
	public def addTopic(o) {
		o.objid = "DTPIC:"  + new java.rmi.server.UID();
		o.dtposted = dateService.serverDate;
		o.userid = env.userid;
		o.state = "open";
		if(!o.viewoption) o.viewoption = 0;
		em.create("discussion:topic", o );
		o?.subscribers.each {
			addTopicSubscriber( [topicid: o.objid, userid: it.objid] );
		}
	}

	@ProxyMethod
	public def updateTopic(o) {
		em.update("discussion:topic", o );
	}

	@ProxyMethod
	public def getTopics(o) {
		o.limit = 10;
		def list = em.sqlContext.createNamedQuery("discussion:topic-list").setParameters(o).resultList;
		list.each {
			if(it.dtposted) it.dtposted = df.format( it.dtposted );
		}
		return list;
	}

	@ProxyMethod
	public def getTopicMembers(o) {
		return em.sqlContext.createNamedQuery("discussion:topic-members").setParameters(x).resultList;
	}

	@ProxyMethod
	public def getResources(o) {
		return em.sqlContext.createNamedQuery("discussion:resource-list").setParameters(o).resultList;
	}

	@ProxyMethod
	public def openTopic(o) {
		return em.read( "discussion:topic", o );
	}
	
	@ProxyMethod
	public def addTopicSubscriber(o) {
		return em.create( "discussion:topic-subscriber", o );
	}
	
	@ProxyMethod
	public def removeTopicSubscriber(o) {
		return em.delete( "discussion:topic-subscriber", o );
	}
	
	@ProxyMethod
	public def addResource(o) {
		o.objid = "DISCRS:"+new java.rmi.server.UID();
		o.userid = env.userid;
		o.dtposted = dateService.serverDate;
		return em.create( "discussion:resource", o );
	}

	@ProxyMethod
	public def removeResource(o) {
		return em.delete( "discussion:resource", o );
	}
	
	/*******************************
	* discussion threads
	********************************/
	

	@ProxyMethod
	public def getMessages(o) {
		o.msgtype = "topic";
		print o;
		return msgService.getPublicMessages(o);
	}
	
	@ProxyMethod
	public def getResponses(o) {
		o.msgtype = "topic";
		return msgService.getResponses(o);
	}
	
	@ProxyMethod
	public def send(o) {
		o.scope = "public";
		o.msgtype = "topic";
		return msgService.send(o);
	}	
	
	@ProxyMethod
	public def removeMessage(o) {
		o.msgtype = "topic";
		return msgService.removeMessage(o);
	}	
	
}