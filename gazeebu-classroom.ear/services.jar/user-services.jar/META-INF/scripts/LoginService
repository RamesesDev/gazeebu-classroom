import com.rameses.annotations.*;
import com.rameses.util.*;

class LoginService {
	
    @PersistenceContext("main")
    def em;
    
	@Service("SessionService")
	def sessionService;
	
    @ProxyMethod
    public def login( def o ) {
		def login = em.sqlContext.createQuery('select * from login where uid=$P{username}').setParameters(o).singleResult;
		if(!login) {
			throw new Exception("Invalid username and password");
		}
		
		o.password = Encoder.MD5.encode(o.password, o.username);
		if(login.password != o.password) {
			throw new Exception("Invalid username and password");
		}

		//test first adding the roles.
		def p = [:];
		p.username = login.uid;	
		p.userid = login.objid;	
		
		p.handler = [
			servicename : 'UserProfileService',
			method:       'getUserInfo',
			params:       [[objid: login.objid]] as Object[]
		];
		
		def sessionid =  sessionService.register([username:p.userid, info:p]);
		p.sessionid = sessionid;
		
		return p;
    }
	
	@ProxyMethod
	public void changePassword( def o ) {
		def login = em.sqlContext.createQuery('select * from login where uid=$P{username}').setParameters(o).singleResult;
		
		if(!login) {
			throw new Exception("Login account not found.");
		}
		
		o.oldpassword = Encoder.MD5.encode(o.oldpassword, o.username);
		if(login.password != o.oldpassword) {
			throw new Exception("Invalid current password provided.");
		}
		
		o.newpassword = Encoder.MD5.encode(o.newpassword, o.username);
		em.sqlContext.createExecutor('update login set password = $P{newpassword} where uid=$P{username}')
		  .setParameters(o).execute();
	}	
}
