import com.rameses.annotations.*;

class LoginService {
	
    @PersistenceContext("main")
    def em;
    
	@Service("SessionService")
	def sessionService;
	
    @ProxyMethod
    public def login( def o ) {
		def login = em.sqlContext.createQuery('select * from login where uid=$P{username}').setParameters(o).singleResult;
		if(!login) {
			throw new Exception("Invalid username and password");
		}
		if(login.password != o.password) {
			throw new Exception("Invalid username and password");
		}
		//retrieve the associated entity for this login
		def profile = em.read( "userprofile", [objid: login.objid] );
		if(!profile) profile = [:];
		//test first adding the roles.
		def p = [:];
		p.username = login.uid;	
		p.userid = login.objid;	
		p.roles = profile.roles;
		
		p.profile = profile.profile;
		p.photoversion = profile.info?.photoversion;
		p.lastname = profile.lastname;
		p.firstname = profile.firstname;
		p.has_set_security = profile.info?.has_set_security;
		
		def sessionid =  sessionService.register([username:p.userid, info:p]);
		p.sessionid = sessionid;
		
		return p;
    }
	
	@ProxyMethod
	public void changePassword( def o ) {
		def login = em.sqlContext.createQuery('select * from login where uid=$P{username}').setParameters(o).singleResult;
		
		if(!login) {
			throw new Exception("Login account not found.");
		}
		
		if(login.password != o.oldpassword) {
			throw new Exception("Invalid current password provided.");
		}
		
		em.sqlContext.createExecutor('update login set password = $P{newpassword} where uid=$P{username}')
		  .setParameters(o).execute();
	}	
}
