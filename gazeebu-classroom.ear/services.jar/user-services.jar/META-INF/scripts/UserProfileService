import com.rameses.annotations.*;
import com.rameses.util.*;

class UserProfileService 
{	
    @PersistenceContext("main")
    def em;
    
	@Service("DateService")
	def dateSvc;
	
	@Resource("CacheService")
	def cacheService;
	
	def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
	
	
	//checks if a name can be used. true = name can be used. false = name cannot be used.
	@ProxyMethod
	public def verifyUsername(def username ) {
		def o = em.sqlContext.createQuery('select 1 from login u where u.uid=?').setParameter(1, username).singleResult;
		if( !o ) return true;
		return false;
	}
	
	@ProxyMethod
	public def register(def o ) {
		if( !verifyUsername(o.username) )
			throw new Exception("Invalid username. Name is already taken");
		//create login first
		o.objid = "USR:"+new java.rmi.server.UID();
		def u = [:];    	
    	u.objid = o.objid;
    	u.uid = o.username;
    	u.password = Encoder.MD5.encode(o.password, u.uid);
		u.usertype = o.role;
		em.create( "login", u );
		o.dtcreated = dateSvc.serverDate;
		return em.create("userprofile", o);
	}

    @ProxyMethod
    public def update( def o ) {
		def user = em.update("userprofile", o);
		cacheService.remove( o.objid );
		return user;
    }
	
   @ProxyMethod
	public def getInfo( def o ){
		def info = em.read("userprofile", [objid:o.objid]);
		if(info.birthdate) info.birthdate = df.format( info.birthdate );
		if(info.dtcreated) info.dtcreated = info.dtcreated.toString();
		return info;
	}
	
	/*
	 * This is marked as local to avoid interceptors
	 * This is used to retrieve the user info from the SessionService
	 * @see LoginService
	 */
	@ProxyMethod(local=true)
	public def getUserInfo( def o ) {
		def user = cacheService.get( o.objid );
		if( !user ) {
			user = getInfo( o );
			cacheService.put(o.objid, user, 30000 );
		}
		
		user.photoversion = user.info?.photoversion;
		user.has_set_security = user.info?.has_set_security;
		
		return user;
	}
	
}
