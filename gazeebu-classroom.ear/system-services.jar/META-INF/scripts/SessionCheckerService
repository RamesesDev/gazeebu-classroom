import com.rameses.annotations.*
import com.rameses.server.common.*


class SessionCheckerService 
{
	@PersistenceContext("java:system")
	def em
	
	@Service('DateService')
	def dateService
	
	@Service('SessionService')
	def sessService
	
	
	/*--- deployer support ----*/
	@ProxyMethod
	public void start() {
		try {
			print "STARTING SESSION CHECKER SERVICE"
			
			def schedulerid = 'session-checker'
			def entry = em.sqlContext.createQuery('select 1 from sys_task where id=?').setParameter(1, schedulerid).singleResult
			if( entry ) return
			
			def task = [
				id			: schedulerid,
				service		: 'SessionCheckerService',
				method		: 'execute',
				interval	: '1m',
				startdate	: dateService.serverDate,
				appcontext	: AppContext.getName(),
				apphost		: 'localhost:8080',
			]
			
			em.sqlContext.createNamedExecutor('scheduler:add-task').setParameters( task ).execute()
		}
		catch(e) {
			e.printStackTrace();
		}
	}
	
	@ProxyMethod
	public void end() {
		
	}
	
	/*--- scheduler support ----*/
	@ProxyMethod
	public def execute( task ) {
		try {
			def currentdate = dateService.serverDate
			
			def sessions = em.sqlContext.createNamedQuery('session:get-expired').setParameter('currentdate', currentdate).resultList;
			if( !sessions ) return true;
			
			println 'collecting expired sessions'
			sessions.each {
				sessService.notifyTimeout( it.sessionid )
			}
		}
		catch(e) {;}
		
		return true;
	}

}
